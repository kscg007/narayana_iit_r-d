superuser: 123456


john.doe@narayanagroup.com
AnotherPass123!


{
  "name": "John Doe",
  "email": "john.doe@narayanagroup.com"
}

{
  "email": "john.doe@narayanagroup.com",
  "password": "AnotherPass123!"
}



{
  "name": "Test User",
  "email": "test.user@narayanagroup.com"
}

{
  "email": "test.user@narayanagroup.com",
  "password": "StrongPassword123"
}


{
  "email": "gk.user@narayanagroup.com",
  "password": "Gk@5445"
}


{
    "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc0NTk4NzE4NiwiaWF0IjoxNzQ1OTAwNzg2LCJqdGkiOiJhNzUwYmMyNmIxYTQ0MmIxYTQzZGYyZDExNjE2Y2YwZCIsInVzZXJfaWQiOjd9.yHEyg4M7xKvEtKyd0J77js1s87Q-tQ4MCFZV13Rz_4k",
    "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ1OTAxNjg2LCJpYXQiOjE3NDU5MDA3ODYsImp0aSI6Ijg1M2FhZDFiY2E4YTQ4MzY4YTgzZjM4NmQ2YmUwYWVkIiwidXNlcl9pZCI6N30.ArsPJV6zNsjEBv122mvyPzN66K4WLVkQtA4d4gXoHCI"
}








When the output message of api is 

Set Password response: 
Object { message: "User created successfully" }
login.js:196:21

we need to implement google authenticator backend and frontend as well.



My requirements were:

then the process should be moved to next card, "Google Authentication"

<!-- Login Modal -->
    <div x-data="loginComponent()">
      <!-- Overlay -->
      <div
        @click.self="closeLogin()"
        x-show="showLogin || showSetPassword"
        x-transition.opacity
        class="fixed inset-0 backdrop-blur-sm z-40 pointer-events-auto"
        style="background-color: rgba(189, 221, 228, 0.3);"
      ></div>

      <!-- Login Card -->
      <div
        x-show="showLogin || showSetPassword"
        x-transition
        class="fixed inset-0 flex items-center justify-center z-50 p-6"
        style="display: none;"
      >
        <div class="relative bg-white bg-opacity-60 backdrop-blur-lg rounded-2xl shadow-2xl max-w-md w-full p-8 border border-gray-200">
          <!-- Close Button -->
          <button
            @click="closeLogin()"
            class="absolute top-4 right-4 text-gray-600 hover:text-gray-900 transition-colors duration-200 text-3xl font-semibold focus:outline-none"
            aria-label="Close login form"
          >
            &times;
          </button>

          <!-- Step 1: Email Input -->
          <template x-if="!action && showLogin">
            <div>
              <h2 class="text-3xl font-extrabold mb-6 text-gray-900 tracking-tight text-center">Login</h2>
              <div class="relative mb-4">
                <img src="{% static 'images/mail.svg' %}" alt="Mail icon" class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none" aria-hidden="true" />
                <input
                  type="email"
                  placeholder="Enter your email"
                  x-model="loginEmail"
                  class="w-full pl-14 p-4 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                  autocomplete="email"
                />
              </div>
              <div x-show="errorMessage" class="text-red-500 text-sm mt-2" x-text="errorMessage"></div>
              <button
                @click="submitEmail()"
                class="w-full bg-blue-500 text-white py-2 rounded-lg mt-4 hover:bg-blue-600"
              >
                Next
              </button>
            </div>
          </template>

          <!-- Step 2: Set Password -->
          <template x-if="showSetPassword">
            <div>
              <!-- Header Section -->
              <div class="flex items-center justify-center h-full">
                <img class="w-auto h-10" src="{% static 'images/password2.svg' %}" alt="PasswordLogo" />
              </div>
              <br>
              <h2 class="text-3xl font-extrabold mb-6 text-gray-900 tracking-tight text-center">Set Password</h2>

              <!-- Enter New Password -->
              <div class="relative mb-4">
                <label for="new-password" class="block text-sm font-medium text-gray-700">Enter New Password</label>
                <div class="relative">
                  <input
                    id="new-password"
                    :type="showPassword ? 'text' : 'password'"
                    placeholder="Enter your new password"
                    x-model="password"
                    class="w-full p-4 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                    autocomplete="new-password"
                  />
                  <!-- Eye Icon -->
                  <button
                    type="button"
                    @click="showPassword = !showPassword"
                    class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
                    aria-label="Toggle password visibility"
                  >
                    <template x-if="showPassword">
                      <img class="w-auto h-5" src="{% static 'images/eye_open.svg' %}" alt="EyeOpen" />
                    </template>
                    <template x-if="!showPassword">
                      <img class="w-auto h-5" src="{% static 'images/eye_closed.svg' %}" alt="EyeClosed" />
                    </template>
                  </button>
                </div>
                <!-- Password Requirements -->
                <ul class="text-sm text-gray-500 mt-2">
                  <li x-show="!passwordValidations.minLength" class="text-red-500">At least 12 characters</li>
                  <li x-show="!passwordValidations.uppercase" class="text-red-500">At least one uppercase letter</li>
                  <li x-show="!passwordValidations.lowercase" class="text-red-500">At least one lowercase letter</li>
                  <li x-show="!passwordValidations.number" class="text-red-500">At least one number</li>
                  <li x-show="!passwordValidations.symbol" class="text-red-500">At least one special character</li>
                </ul>
              </div>

              <!-- Confirm New Password -->
              <div class="relative mb-4">
                <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm New Password</label>
                <input
                  id="confirm-password"
                  :type="showPassword ? 'text' : 'password'"
                  placeholder="Confirm your new password"
                  x-model="confirmPassword"
                  class="w-full p-4 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition"
                  autocomplete="new-password"
                />
                <!-- Confirm Password Validation Error -->
                <p x-show="confirmPasswordError" class="text-red-500 text-sm mt-2" x-text="confirmPasswordError"></p>
              </div>

              <!-- Submit Button -->
              <button
                class="w-full text-white font-semibold py-4 rounded-lg shadow-md transition duration-300 disabled:cursor-not-allowed"
                @click="submitSetPassword()"
                :disabled="!password || !confirmPassword || !!passwordError || !!confirmPasswordError"
                :style="!password || !confirmPassword || !!passwordError || !!confirmPasswordError
                  ? 'background-color: #91DDCF; opacity: 1; cursor: not-allowed;'
                  : 'background-color: #295F98; opacity: 1; cursor: pointer;'"
              >
                Submit
              </button>
            </div>
          </template>
        </div>
      </div>
    </div>








    import io
import qrcode
import pyotp
import base64
import random
import logging


from django.db import transaction
from django.utils import timezone
from django.utils.timezone import now
from django.core.mail import send_mail
from django.contrib.auth import authenticate, logout

from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken

from .models import User, OTP, PendingUser
from .serializers import SignupSerializer, OTPVerifySerializer, SetPasswordSerializer, LoginSerializer, LoginOTPRequestSerializer, PasswordResetSerializer, GoogleAuthenticatorRegisterSerializer


logger = logging.getLogger('users')


class SignupView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = SignupSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            name = serializer.validated_data['name']

            # Create or update PendingUser
            pending_user, created = PendingUser.objects.update_or_create(
                email=email,
                defaults={'name': name, 'otp_verified': False}
            )

            # Delete old OTPs for this email (invalidate previous OTPs)
            OTP.objects.filter(email=email).delete()

            # Generate new OTP
            otp_code = f"{random.randint(100000, 999999)}"
            OTP.objects.create(email=email, code=otp_code, created_at=timezone.now())

            # Send OTP email (prints to console or real email)
            send_mail(
                subject="Your OTP Code",
                message=f"Your OTP code is {otp_code}. It will expire in 5 minutes.",
                from_email='no-reply@narayanagroup.com',
                recipient_list=[email],
            )

            # Log OTP sent event (optional, see next steps)
            logger.info(f"OTP sent to {email}: {otp_code}")

            return Response({"message": "OTP sent to your email"}, status=status.HTTP_200_OK)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



class OTPVerifyView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = OTPVerifySerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            otp_code = serializer.validated_data['otp']

            # Check if user already exists
            if User.objects.filter(email=email).exists():
                return Response({"error": "User already registered. Please login."}, status=400)
            
            if not PendingUser.objects.filter(email=email).exists():
                logger.warning(f"OTP verification failed: email {email} is not registered")
                return Response({"error": "Email is not registered or invalid email"}, status=status.HTTP_400_BAD_REQUEST)

            try:
                otp_obj = OTP.objects.filter(email=email, code=otp_code, is_used=False).latest('created_at')
            except OTP.DoesNotExist:
                logger.warning(f"Invalid OTP attempt for {email}")
                return Response({"error": "Invalid OTP"}, status=status.HTTP_400_BAD_REQUEST)

            if otp_obj.is_expired():
                # OTP expired: cleanup OTP and PendingUser atomically
                with transaction.atomic():
                    otp_obj.delete()
                    PendingUser.objects.filter(email=email).delete()
                logger.error(f"OTP expired for {email}, pending user deleted")
                return Response({"error": "OTP expired. Please click Resend OTP."}, status=status.HTTP_400_BAD_REQUEST)

            # OTP valid: mark used and mark PendingUser verified atomically
            with transaction.atomic():
                otp_obj.is_used = True
                otp_obj.save()

                try:
                    pending_user = PendingUser.objects.get(email=email)
                except PendingUser.DoesNotExist:
                    logger.warning(f"OTP verification failed: no pending user found for {email}")
                    return Response({"error": "No pending registration found. Please sign up."}, status=400)

                pending_user.otp_verified = True
                pending_user.save()

            logger.info(f"OTP verified for {email}")
            return Response({"message": "OTP verified, please login and set your password"}, status=status.HTTP_200_OK)

        logger.warning(f"OTP verification failed due to serializer errors: {serializer.errors}")
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



class SetPasswordView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = SetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']
            password = serializer.validated_data['password']

            if User.objects.filter(email=email).exists():
                logger.warning(f"SetPassword attempt for existing user: {email}")
                return Response({"error": "User already exists"}, status=status.HTTP_400_BAD_REQUEST)
            
            if not PendingUser.objects.filter(email=email).exists():
                logger.warning(f"OTP verification failed: email {email} is not registered")
                return Response({"error": "Email is not registered or invalid email"}, status=status.HTTP_400_BAD_REQUEST)

            try:
                pending_user = PendingUser.objects.get(email=email)
            except PendingUser.DoesNotExist:
                logger.warning(f"SetPassword attempt failed: user not found or not signed up for {email}")
                return Response({"error": "User not found. Please sign up first."}, status=status.HTTP_400_BAD_REQUEST)

            if not pending_user.otp_verified:
                logger.warning(f"SetPassword attempt failed: email not verified for {email}")
                return Response({"error": "Email not verified. Please verify OTP first."}, status=status.HTTP_400_BAD_REQUEST)

            

            with transaction.atomic():
                # Create the user
                user = User.objects.create_user(email=email, name=pending_user.name, password=password)
                logger.info(f"User created: {email}")

                # Cleanup: delete pending user and all OTPs for this email
                pending_user.delete()
                OTP.objects.filter(email=email).delete()

            return Response({"message": "User created successfully"}, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



class LoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = LoginSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        email = serializer.validated_data['email']
        password = serializer.validated_data.get('password')
        otp = serializer.validated_data.get('otp')

        user_exists = User.objects.filter(email=email).exists()
        pending_user = PendingUser.objects.filter(email=email).first()

        # Restrict login if user is not verified
        if not user_exists:
            if not pending_user:
                return Response({"error": "User not found. Please sign up."}, status=status.HTTP_404_NOT_FOUND)
            if not pending_user.otp_verified:
                return Response({"error": "OTP not verified. Please sign up and complete verification process."}, status=status.HTTP_400_BAD_REQUEST)

        # Password login
        if password:
            if not user_exists:
                return Response({"error": "User not found. Please sign up."}, status=status.HTTP_404_NOT_FOUND)
            user = authenticate(request, email=email, password=password)
            if user is None:
                return Response({"error": "Invalid credentials"}, status=status.HTTP_400_BAD_REQUEST)

            # Update last_login here
            user.last_login = now()
            user.save(update_fields=['last_login'])

            # Generate tokens
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)

            # Set tokens as HttpOnly cookies
            response = Response({"message": "Login successful"})
            response.set_cookie(
                key="access_token",
                value=access_token,
                httponly=True,
                secure=True,  # Use HTTPS
                samesite="Strict",  # Prevent cross-site usage
            )
            response.set_cookie(
                key="refresh_token",
                value=str(refresh),
                httponly=True,
                secure=True,
                samesite="Strict",
            )
            return response

        # OTP login
        if otp:
            if not user_exists:
                return Response({"error": "User not found. Please sign up."}, status=status.HTTP_404_NOT_FOUND)
            try:
                otp_obj = OTP.objects.filter(email=email, code=otp, is_used=False, otp_type='login').latest('created_at')
            except OTP.DoesNotExist:
                logger.warning(f"Invalid login OTP attempt for {email}")
                return Response({"error": "Invalid OTP"}, status=status.HTTP_400_BAD_REQUEST)

            if otp_obj.is_expired():
                with transaction.atomic():
                    otp_obj.delete()
                logger.error(f"Login OTP expired for {email}")
                return Response({"error": "OTP expired. Please request a new OTP."}, status=status.HTTP_400_BAD_REQUEST)

            with transaction.atomic():
                otp_obj.is_used = True
                otp_obj.save()
                user = User.objects.get(email=email)

                # Update last_login here
                user.last_login = now()
                user.save(update_fields=['last_login'])

                # Generate tokens
                refresh = RefreshToken.for_user(user)
                access_token = str(refresh.access_token)

                # Set tokens as HttpOnly cookies
                response = Response({"message": "Login successful via OTP"})
                response.set_cookie(
                    key="access_token",
                    value=access_token,
                    httponly=True,
                    secure=True,  # Use HTTPS
                    samesite="Strict",
                )
                response.set_cookie(
                    key="refresh_token",
                    value=str(refresh),
                    httponly=True,
                    secure=True,
                    samesite="Strict",
                )
                return response

        return Response({"error": "Invalid request"}, status=status.HTTP_400_BAD_REQUEST)


class LoginOTPRequestView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = LoginOTPRequestSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.validated_data['email']

            # Check if user exists
            if not User.objects.filter(email=email).exists():
                return Response({"error": "User not found. Please sign up."}, status=status.HTTP_404_NOT_FOUND)

            # Delete old login OTPs for this email
            OTP.objects.filter(email=email, otp_type='login').delete()

            # Generate new login OTP
            otp_code = f"{random.randint(100000, 999999)}"
            OTP.objects.create(email=email, code=otp_code, otp_type='login', created_at=timezone.now())

            # Send OTP email
            send_mail(
                subject="Your Login OTP Code",
                message=f"Your login OTP code is {otp_code}. It will expire in 5 minutes.",
                from_email='no-reply@narayanagroup.com',
                recipient_list=[email],
            )

            logger.info(f"Login OTP sent to {email}: {otp_code}")

            return Response({"message": "Login OTP sent to your email"}, status=status.HTTP_200_OK)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class PasswordResetView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = PasswordResetSerializer(data=request.data)
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        email = serializer.validated_data['email']
        otp = serializer.validated_data.get('otp')
        password = serializer.validated_data.get('password')

        if not otp and not password:
            # Step 1: Send OTP
            OTP.objects.filter(email=email, otp_type='reset_password').delete()
            otp_code = f"{random.randint(100000, 999999)}"
            OTP.objects.create(email=email, code=otp_code, otp_type='reset_password', created_at=timezone.now())
            send_mail(
                subject="Your Password Reset OTP",
                message=f"Your password reset OTP is {otp_code}. It expires in 5 minutes.",
                from_email='no-reply@narayanagroup.com',
                recipient_list=[email],
            )
            return Response({"message": "Password reset OTP sent to your email"}, status=status.HTTP_200_OK)

        elif otp and not password:
            # Step 2: Verify OTP
            try:
                otp_obj = OTP.objects.filter(email=email, code=otp, is_used=False, otp_type='reset_password').latest('created_at')
            except OTP.DoesNotExist:
                return Response({"error": "Invalid OTP"}, status=status.HTTP_400_BAD_REQUEST)

            if otp_obj.is_expired():
                otp_obj.delete()
                return Response({"error": "OTP expired. Please request a new OTP."}, status=status.HTTP_400_BAD_REQUEST)

            otp_obj.is_used = True
            otp_obj.save()
            return Response({"message": "OTP verified. You can now reset your password."}, status=status.HTTP_200_OK)

        elif otp and password:
            # Step 3: Reset password
            try:
                user = User.objects.get(email=email)
            except User.DoesNotExist:
                return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

            # Optional: Verify OTP again here or require fresh OTP verification before password reset

            user.set_password(password)
            user.save()
            return Response({"message": "Password reset successful."}, status=status.HTTP_200_OK)

        else:
            return Response({"error": "Invalid request."}, status=status.HTTP_400_BAD_REQUEST)
        


class GoogleAuthenticatorRegisterView(APIView):
    permission_classes = [IsAuthenticated]  # Require the user to be authenticated

    def post(self, request):
        email = request.user.email  # Use the authenticated user's email

        # Fetch the user
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)

        # Generate a secret key for Google Authenticator
        secret = pyotp.random_base32()

        # Save the secret key to the user's model
        user.google_authenticator_secret = secret
        user.save()

        # Generate a QR code URL for Google Authenticator
        totp = pyotp.TOTP(secret)
        otp_auth_url = totp.provisioning_uri(name=email, issuer_name="N_IIT_RAW")

        # Generate the QR code as an image
        qr = qrcode.make(otp_auth_url)
        buffer = io.BytesIO()
        qr.save(buffer, format="PNG")
        buffer.seek(0)

        # Convert the QR code image to a base64-encoded data URL
        qr_code_data_url = f"data:image/png;base64,{base64.b64encode(buffer.getvalue()).decode()}"

        return Response({
            "message": "Google Authenticator registration initiated",
            "qr_code_url": qr_code_data_url  # Send only the QR code
        }, status=status.HTTP_200_OK)

class GoogleAuthenticatorVerifyView(APIView):
    permission_classes = [AllowAny]  # Allow access to everyone (no authentication required)

    def post(self, request):
        # Get the email and OTP from the request
        email = request.data.get('email')
        otp = request.data.get('otp')

        if not email or not otp:
            return Response({"error": "Email and OTP are required"}, status=status.HTTP_400_BAD_REQUEST)

        # Fetch the user by email
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "User not found"}, status=status.HTTP_404_NOT_FOUND)

        # Check if the user has Google Authenticator enabled
        if not user.google_authenticator_secret:
            return Response({"error": "Google Authenticator is not registered for this user"}, status=status.HTTP_400_BAD_REQUEST)

        # Verify the OTP
        totp = pyotp.TOTP(user.google_authenticator_secret)
        if totp.verify(otp):
            # OTP is valid, issue tokens
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)

            # Set tokens as HttpOnly cookies
            response = Response({"message": "Google Authenticator verified"})
            response.set_cookie(
                key="access_token",
                value=access_token,
                httponly=True,
                secure=True,  # Use HTTPS
                samesite="Strict",
            )
            response.set_cookie(
                key="refresh_token",
                value=str(refresh),
                httponly=True,
                secure=True,
                samesite="Strict",
            )
            return response
        else:
            return Response({"error": "Invalid OTP"}, status=status.HTTP_400_BAD_REQUEST)

class LogoutView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        # Blacklist the refresh token
        refresh_token = request.COOKIES.get('refresh_token')
        if refresh_token:
            try:
                token = RefreshToken(refresh_token)
                token.blacklist()  # Blacklist the token to prevent reuse
            except Exception as e:
                # Handle invalid or already blacklisted tokens
                pass

        # Log the user out of the session
        logout(request)

        # Clear the cookies
        response = Response({"message": "Logged out successfully"})
        response.delete_cookie("access_token")
        response.delete_cookie("refresh_token")
        return response